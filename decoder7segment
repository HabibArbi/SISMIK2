module decoder7segment (segment, counter); // behavioral
input [3:0] register;
output reg [7:0] segment;
always @(register)
begin
    case(register)
          //urutan segment : DP,D[6],D[5],D[4],D[3],D[2],D[1],D[0]
          4'b0000 : segment = 8'b11000000; // 0
          4'b0001 : segment = 8'b11111001; // 1
          4'b0010 : segment = 8'b10100100; // 2
          4'b0011 : segment = 8'b10110000; // 3
          4'b0100 : segment = 8'b10011001; // 4
          4'b0101 : segment = 8'b10010010; // 5
          4'b0110 : segment = 8'b10000010; // 6
          4'b0111 : segment = 8'b11111000; // 7
          4'b1000 : segment = 8'b10000000; // 8
          4'b1001 : segment = 8'b10010000; // 9
          4'b1010 : segment = 8'b10100000; // a
          4'b1011 : segment = 8'b10000011; // b
          4'b1100 : segment = 8'b11000110; // c
          4'b1101 : segment = 8'b10100001; // d
          4'b1110 : segment = 8'b10000100; // e
          4'b1111 : segment = 8'b10001110; // f
          default : segment = 8'b11111111; // mati
     endcase
end
endmodule
